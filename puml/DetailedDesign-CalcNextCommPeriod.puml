@startuml 
start
->Calculate next commutation period

Measure the duration of current commutation period,
and update Comm_Period4x by averaging a fraction of it.

Called immediately after each commutation

Stop global & timer 2 interrupts & Read commutation time;
:IE_EA = 0;
:TMR2CN0_TR2 = 0;
:Temp1 = TMR2L;
:Temp2 = TMR2H;
:Temp3 = Timer2_X;
->Check if interrupt is pending;
if (TMR2CN0_TF2H == 1) then
  ->yes -> If it is pending, then timer has already wrapped;
  :Temp3++;
endif
->Enable global & timer 2 interrupts again;
:IE_EA = 1;
:TMR2CN0_TR2 = 1;
if (MCU_48MHZ == 1) then
  ->yes -> divide time by 2;
  :CARRY_BIT = 0;
  :Temp3 = CARRY_BIT::Temp3 >> 1;
  :Temp2 = CARRY_BIT::Temp2 >> 1;
  :Temp1 = CARRY_BIT::Temp1 >> 1;
endif
if (Flag_Startup_Phase == 0) then
  ->yes -> Calculate this commutation time;
  :CARRY_BIT = 0;
  :A = Temp1;
  :A = A - Prev_Comm_L;
  ->Save timestamp as previous commutation;
  :Prev_Comm_L = Temp1;
  ->Temp1 = Temp1 - (Prev_Comm_L + CARRY_BIT); 
  :Temp1 = A;
  :A = Temp2;
  :A = A - (Prev_Comm_H + CARRY_BIT);
  ->Save timestamp as previous commutation;
  :Prev_Comm_H = Temp2;
  if (MCU_48MHZ == 1) then
    :A = A & 0x7F;
  endif
  ->Temp2 = Temp2 - (Prev_Comm_H + CARRY_BIT); 
  :Temp2 = A;
  ->Check high or normal rpm;
  if (Flag_High_Rpm == 1) then
    ->yes -> high RPM
    Fast calculation (Comm_Period4x_H less than 2)
    Comm_Period4x holds the time of 4 commutations
    (calc_next_comm_period_fast);
    :Temp3 = Comm_Period4x_L;
    :Temp4 = Comm_Period4x_H;
    ->Divide by 16 and store in Temp5;
    :Divide_12Bit_By_16	Temp4, Temp3, Temp5;
    ->Subtract a fraction;
    :CARRY_BIT = 0;
    :A = Temp3;
    :A = A - Temp5;
    :Temp3 = A;
    :A = Temp4;
    :A = A - (0 + CARRY_BIT);
    :Temp4 = A;
    ->Note: Temp2 is assumed to be zero (approx. Comm_Period4x_H / 4);
    :A = Temp1;
    :A = A >> 1;
    :A = A >> 1;
    :A = A & 0x3F;
    ->Add the divided new time;
    :A = A + Temp3;
    :A = A + (0 + CARRY_BIT);
    :Temp4 = A;
    ->Store Comm_Period4x;
    :Comm_Period4x_L = Temp3;
    :Comm_Period4x_H = Temp4;
    ->Is Comm_Period4x_H 2 or more? (below ~160k erpm);
    :CARRY_BIT = 0;
    :A = A - 2;
    if (CARRY_BIT == 1) then
      ->Yes - Clear high rpm bit;
      :Flag_High_Rpm = 0;
    endif
    ->Divide Comm_Period4x by 16 and store in Temp4/3;
    :A = Temp4;
    ->Exchange lo/hi 4bits (nibbles)
    :SWAP A;
    :Temp7 = A;
    ->Clear waiting time high byte;
    :Temp4 = 0;
    :A = Temp3;
    ->Exchange lo/hi 4bits (nibbles)
    :SWAP A;
    :A = A & 0x0F;
    :A = A | Temp7;
    ->Timing reduction;
    :CARRY_BIT = 0;
    :A = A - 2;
    :Temp3 = A;
    ->Check A < 2;
    if (CARRY_BIT == 1) then
      ->yes -> Set minimum waiting time
      (Timers cannot wait for a delay of 0);
      :Temp3 = 1;
    endif
  else
    ->no -> normal RPM
    Prepare averaging by dividing Comm_Period4x and
    current commutation period (Temp2/1) according to speed;
    :Temp3 = Comm_Period4x_L;
    :Temp4 = Comm_Period4x_H;
    :CARRY_BIT = 0;
    :A = Temp4;
    :A = A - 4;
    ->Check Comm_Period4x_H < 4 
    (CARRY_BIT is 1)
    above ~80k erpm;
    if (CARRY_BIT == 1) then
      ->yes -> Use averaging for high speeds
      Update Comm_Period4x from 1/4 new commutation period
      Divide Temp4/3 by 16 and store in Temp5
      (calc_next_comm_div_16_4);
      :Divide_12Bit_By_16	Temp4, Temp3, Temp5;
      :Temp6 = 0;
      ->Divide Temp2/1 by 4 and store in Temp2/1;
      :Divide_By_4	Temp2, Temp1, Temp2, Temp1;
    else
      ->no -> Check Comm_Period4x_H < 8;
      :A = A - 4;
      ->Check Comm_Period4x_H < 8 
      (CARRY_BIT is 1)
      above ~40k erpm;
      if (CARRY_BIT == 1) then
        ->Yes -> Use averaging for low speeds
        Update Comm_Period4x from 1/2 new commutation period
		Divide Temp4/3 by 8 and store in Temp5
		(calc_next_comm_div_8_2);
        :Divide_11Bit_By_8	Temp4, Temp3, Temp5;
        :Temp6 = 0;
        ->Divide by 2;
        :CARRY_BIT = 0;
        :Temp2 = CARRY_BIT::Temp2 >> 1;
        :Temp1 = CARRY_BIT::Temp1 >> 1;
      else
        ->No -> Use averaging for even lower speeds;
        if (Flag_Initial_Run_Phase == 1) then
          ->Yes -> Do not average very fast during initial run
          Update Comm_Period4x from 1/2 new commutation period
          Divide Temp4/3 by 8 and store in Temp6/5
          (calc_next_comm_div_8_2_slow);
          :Divide_By_8	Temp4, Temp3, Temp6, Temp5;
          ->Divide by 2;
          :CARRY_BIT = 0;
          :Temp2 = CARRY_BIT::Temp2 >> 1;
          :Temp1 = CARRY_BIT::Temp1 >> 1;
        else
          ->no
          (calc_next_comm_div_4_1);
          :TDivide_By_4	Temp4, Temp3, Temp6, Temp5;
        endif
      endif
    endif
    
    ->(calc_next_comm_average_and_update)
    Comm_Period4x = 
        Comm_Period4x - (Comm_Period4x / (16, 8 or 4)) +
        (Comm_Period / (4, 2 or 1))
	Temp6/5: Comm_Period4x divided by (16, 8 or 4)
	Subtract a fraction;
    :CARRI_BIT = 0;
    ->Comm_Period4x_L;
    :A = Temp3;
    :A = A - (Temp5 + CARRY_BIT);
    :Temp3 = A;
    ->Comm_Period4x_H;
    :A = Temp4;
    :A = A - (Temp4 + CARRY_BIT);
    :Temp4 = A;
    ->Temp2/1: This commutation period divided by (4, 2 or 1);
	:A = Temp3;
	:A = A + Temp1;
	:Comm_Period4x_L = A;
	:A = Temp4;
	:A = A + Temp2 + CARRY_BIT;
	:Comm_Period4x_H = A;   
	->Is period larger than 0xffff?;
	if (CARRY_BIT == 1) then
	  ->Yes -> Set commutation period registers to very slow timing (0xffff);
	  :Comm_Period4x_L = 0xFF;
	  :Comm_Period4x_H = 0xFF;
	endif

    ->(calc_next_comm_done)
    Is Comm_Period4x_H below 2? (above ~160k erpm);
    :CARRY_BIT = 0;
    :A = Comm_Period4x_H;
    :A = A - 2;
    ->Is Comm_Period4x_H below 2? (above ~160k erpm, CARRY_BIT is 1);
    if (CARRY_BIT == 1) then
      ->yes -> Set high rpm flag;
      :Flag_High_Rpm = 1;
    endif
    	
    ->(calc_next_comm_15deg)
    - Commutation period: 
        360 deg / 6 runs = 60 deg
        60 deg / 4 = 15 deg
    - Load current commutation timing and
      compute 15 deg timing
    - Divide Comm_Period4x by 16 
      (Comm_Period1x divided by 4)
      and store in Temp4/3;
    :Divide_By_16	Comm_Period4x_H, Comm_Period4x_L, Temp4, Temp3;
    ->Subtract timing reduction;
    :CARRY_BIT = 0;
    :A = Temp3;
    :A = A - (2 + CARRY_BIT);
    :Temp3 = A;
    :A = Temp4;
    :A = A - (0 + CARRY_BIT);
    :Temp4 = A;
    ->Check that result is still positive
      (Temp4::Temp3 < 0);
    if (CARRY_BIT == 1) then
      ->yes -> Set minimum waiting time (Timers cannot wait for a delay of 0);
      :Temp3 = 1;
      :Temp4 = 0;
    else
      if (A == 0) then
        ->yes -> Check Temp3 is 0;
        :A = Temp3;
        ->Check Temp4::Temp3 is 0;
        if (A == 0) then
          ->yes -> Set minimum waiting time (Timers cannot wait for a delay of 0);
          :Temp3 = 1;
          :Temp4 = 0;
        endif
      endif
    endif
  endif
else
  ->no -> Calculate this commutation time;
  :Temp4 = TMR2L;
  :Temp5 = TMR2H;
  :Temp6 = Timer2_X;
  ->Store timestamp as previous commutation;
  :Prev_Comm_L = Temp1;
  :Prev_Comm_H = Temp2;
  :Prev_Comm_X = Temp3;
  ->Calculate the new commutation time;
  :CARRY_BIT = 0;
  :A = Temp1;
  :A = A - (Temp4 + CARRY_BIT);
  :A = Temp2;
  :A = A - (Temp5 + CARRY_BIT);
  :A = Temp3;
  :A = A - (Temp6 + CARRY_BIT);
  if (MCU_48MHZ == 1) then
    :A = A & 0x7F;
  endif
  ->Check extended byte is 0;
  if (A != 0) then
    ->yes -> Extended byte is not zero,
    so commutation time is above 0xFFFF;
    :Comm_Period4x_L = 0xFF;
    :Comm_Period4x_H = 0xFF;
  else
    ->no -> Extended byte = 0, so
    commutation time fits within two bytes;
    :Temp7 = Prev_Prev_Comm_L;
    :Temp8 = Prev_Prev_Comm_H;
    ->Update Prev_Prev_Comm times;
    :Prev_Prev_Comm_L = Temp4;
    :Prev_Prev_Comm_H = Temp5;
    ->Calculate the new commutation time
    based upon the two last
    commutations (to reduce sensitivity to offset);
    :CARRY_BIT = 0;
    :A = Temp1;
    :A = A - (Temp7 + CARRY_BIT);
    :Temp1 = A;
    :A = Temp2;
    :A = A - (Temp8 + CARRY_BIT);
    :Temp2 = A;
    ->Comm_Period4x holds the time of
    4 commutations;
    :Temp3 = Comm_Period4x_L;
    :Temp4 = Comm_Period4x_H;
    
    ->(calc_next_comm_div_4_1);
    :TDivide_By_4	Temp4, Temp3, Temp6, Temp5;
    
    ->(calc_next_comm_average_and_update)
    Comm_Period4x = 
        Comm_Period4x - (Comm_Period4x / (16, 8 or 4)) +
        (Comm_Period / (4, 2 or 1))
	Temp6/5: Comm_Period4x divided by (16, 8 or 4)
	Subtract a fraction;
    :CARRI_BIT = 0;
    ->Comm_Period4x_L;
    :A = Temp3;
    :A = A - (Temp5 + CARRY_BIT);
    :Temp3 = A;
    ->Comm_Period4x_H;
    :A = Temp4;
    :A = A - (Temp4 + CARRY_BIT);
    :Temp4 = A;
    ->Temp2/1: This commutation period divided by (4, 2 or 1);
	:A = Temp3;
	:A = A + Temp1;
	:Comm_Period4x_L = A;
	:A = Temp4;
	:A = A + Temp2 + CARRY_BIT;
	:Comm_Period4x_H = A;   
	->Is period larger than 0xffff?;
	if (CARRY_BIT == 1) then
	  ->Yes -> Set commutation period registers to very slow timing (0xffff);
	  :Comm_Period4x_L = 0xFF;
	  :Comm_Period4x_H = 0xFF;
	endif
  endif
  
  ->(calc_next_comm_done)
  Is Comm_Period4x_H below 2? (above ~160k erpm);
  :CARRY_BIT = 0;
  :A = Comm_Period4x_H;
  :A = A - 2;
  ->Is Comm_Period4x_H below 2? (above ~160k erpm, CARRY_BIT is 1);
  if (CARRY_BIT == 1) then
    ->yes -> Set high rpm flag;
    :Flag_High_Rpm = 1;
  endif
  	
  ->(calc_next_comm_15deg)
  - Commutation period: 
      360 deg / 6 runs = 60 deg
      60 deg / 4 = 15 deg
  - Load current commutation timing and
    compute 15 deg timing
  - Divide Comm_Period4x by 16 
    (Comm_Period1x divided by 4)
    and store in Temp4/3;
  :Divide_By_16	Comm_Period4x_H, Comm_Period4x_L, Temp4, Temp3;
  ->Subtract timing reduction;
  :CARRY_BIT = 0;
  :A = Temp3;
  :A = A - (2 + CARRY_BIT);
  :Temp3 = A;
  :A = Temp4;
  :A = A - (0 + CARRY_BIT);
  :Temp4 = A;
  ->Check that result is still positive
    (Temp4::Temp3 < 0);
  if (CARRY_BIT == 1) then
    ->yes -> Set minimum waiting time (Timers cannot wait for a delay of 0);
    :Temp3 = 1;
    :Temp4 = 0;
  else
    if (A == 0) then
      ->yes -> Check Temp3 is 0;
      :A = Temp3;
      ->Check Temp4::Temp3 is 0;
      if (A == 0) then
        ->yes -> Set minimum waiting time (Timers cannot wait for a delay of 0);
        :Temp3 = 1;
        :Temp4 = 0;
      endif
    endif
  endif
endif
->(wait_advance_timing)
Wait advance timing
Waits for the advance timing to elapse
NOTE: Be VERY careful if using temp registers. 
They are passed over this routine
If it has not already, we wait here for the 
Wt_Adv_Start_ delay to elapse.;
:Wait_For_Timer3;
->At this point Timer3 has (already) wrapped 
and been reloaded with the Wt_Zc_Scan_Start_ 
delay.
In case this delay has also elapsed, Timer3 
has been reloaded with a short delay any 
number of times.
- The interrupt flag is set and the pending 
flag will clear immediately after enabling 
the interrupt.
Setup next wait time;
:TMR3RLL = Wt_ZC_Tout_Start_L;
:TMR3RLH = Wt_ZC_Tout_Start_H;
:Flag_Timer3_Pending = 1;
:EIE1 = EIE1 | 0x80;
->(calc_new_wait_times)
Calculate new wait times
Load commutation timing setting;
:Temp1 = &Pgm_Comm_Timing;
:A = *Temp1;
->Store in Temp8;
:Temp8 = A;

:CARRY_BIT = 0;
:A = 0;
->Negate;
:A = A - (Temp3 + CARRY_BIT);
:Temp1 = A;
:A = 0;
:A = A - (Temp4 + CARRY_BIT);
:Temp2 = A;
if (MCU_48MHZ == 1) then
  :CARRY_BIT = 0;
  ->Multiply by 2;
  :Temp1 = Temp1::CARRY_BIT << 1;
  :Temp2 = Temp2::CARRY_BIT << 1;
endif
->Temp2/1 = 15deg Timer2 period
Branch if high rpm;
if (Flag_High_Rpm == 1) then
  ->yes ->
  (calc_new_wait_times_fast)
  Calculate new wait times fast routine
  Copy values;
  :A = Temp1;
  :Temp3 = A;
  ->Negative numbers - set carry;
  :CARRY_BIT = 1;
  ->Divide by 2;
  :A = CARRY_BIT::A >> 1;
  :Temp5 = A;
  ->Use this value for zero cross scan delay (7.5deg);
  :Wt_Zc_Scan_Start_L = Temp5;
  ->Set 15deg time for zero cross scan timeout;
  :Wt_Zc_Tout_Start_L = Temp1;
  :CARRY_BIT = 0;
  ->(Temp8 has Pgm_Comm_Timing);
  :A = Temp8;
  ->Is timing normal?;
  :A = A - (Temp3 + CARRY_BIT);
  
  if (A == 0) then
  	->(store_times_decrease_fast)
  	Yes - branch
  	Now commutation time (~60deg) divided by 4 (~15deg nominal);
  	:Wt_Comm_Start_L = Temp1;
  	->New commutation advance time (~15deg nominal);
  	:Wt_Adv_Start_L = Temp3;
  else
  	->no;
  	:A = Temp8;
  	->If an odd number - branch;
  	if (A.0 == 1) then
  	  ->(adjust_timing_two_steps_fast)
  	  Add 15deg and store in Temp1;
  	  :A = Temp1;
  	  :A = A + Temp1;
  	  :A = A + 1;
  	  :Temp1 = A;
  	  ->Store minimum time in Temp3;
  	  :Temp3 = Temp3 - 1;
  	else
  	  ->no -> Add 7.5deg and store in Temp1;
  	  :A = Temp1;
  	  :A = A + Temp5;
  	  :Temp1 = A;
  	  ->Store 7.5deg in Temp3;
  	  :A = Temp5;
  	  :Temp3 = A;
  	endif
  	
  	->(store_times_up_or_down_fast);
  	:CARRY_BIT = 0;
  	:A = Temp8;
  	->Is timing higher than normal?;
  	:A = A - (3 + CARRY_BIT);
  	if (CARRY_BIT == 1) then
  	  ->yes -> (store_times_decrease_fast)
      Now commutation time (~60deg) divided by 4 (~15deg nominal);
      :Wt_Comm_Start_L = Temp1;
      ->New commutation advance time (~15deg nominal);
      :Wt_Adv_Start_L = Temp3;
  	else
  	  ->no -> (store_times_increase_fast)
      Now commutation time (~60deg) divided by 4 (~15deg nominal);
      :Wt_Comm_Start_L = Temp3;
      ->New commutation advance time (~15deg nominal);
      :Wt_Adv_Start_L = Temp1;
  	endif
  	
  endif
else
  ->no -> Load programmed commutation timing;
  if (Flag_Startup_Phase == 0) then
  	->yes
  	(adjust_comm_timing)
  	Adjust commutation timing according to demag metric;
  	:CARRY_BIT = 0;
  	->Check demag metric;
  	:A = Demag_Detected_Metric;
  	:A = A - (130 + CARRY_BIT);
  	if (CARRY_BIT == 0) then
  	  ->yes -> Increase timing (if metric 130 or above);
  	  :Temp8 = Temp8 + 1;
  	  ->Increase timing again (if metric 160 or above);
  	  :A = A - (30 + CARRY_BIT);
  	  if (CARRY_BIT == 0) then
  	    :Temp8 = Temp8 + 1;
  	  endif
  	  ->Limit timing to max;
  	  :CARRY_BIT = 0;
  	  :A = Temp8;
  	  :A = A - (6 + CARRY_BIT);
  	  if (CARRY_BIT == 0) then
  	    :Temp8 = 5;
  	  endif
  	endif
  else
    ->no -> Set dedicated timing during startup;
    :Temp8 = 3;
  endif
  
  ->(load_comm_timing_done)
  Copy values;
  :A = Temp1;
  :Temp3 = A;
  :A = Temp2;
  :Temp4 = A;
  ->Negative numbers - set carry
  Store 7.5deg in Temp5/6 (15deg / 2);
  :CARRY_BIT = 1;
  :A = Temp2;
  :A = CARRY_BIT::A >> 1;
  :Temp6 = A;
  :A = Temp1;
  :A = CARRY_BIT::A >> 1;
  :Temp5 = A;
  ->Set 7.5deg time for zero cross scan delay;
  :Wt_Zc_Scan_Start_L = Temp5;
  :Wt_Zc_Scan_Start_H = Temp6;
  ->Set 15deg time for zero cross scan timeout;
  :Wt_Zc_Tout_Start_L = Temp1;
  :Wt_Zc_Tout_Start_H = Temp2;
  ->(Temp8 has Pgm_Comm_Timing)
    Is timing normal?
    Yes - branch;
  :CARRY_BIT = 0;
  :A = Temp8;
  :A = A - (3 + CARRY_BIT);
  if (A == 0) then
    ->yes
    (store_times_decrease)
    Now commutation time (~60deg)
    divided by 4 (~15deg nominal);
    :Wt_Comm_Start_L = Temp1;
    :Wt_Comm_Start_H = Temp2;
    ->New commutation advance
    time (~15deg nominal);
    :Wt_Adv_Start_L = Temp3;
    :Wt_Adv_Start_H = Temp4;
    ->Set very short delays for
    all but advance time during
    startup, in order to widen
    zero cross capture range;
    if (Flag_Startup_Phase == 1) then (yes)
      :Wt_Comm_Start_L = -16;
      :Wt_Comm_Start_H = -1;
      :Wt_Zc_Scan_Start_L = -16;
      :Wt_Zc_Scan_Start_H = -1;
      :Wt_Zc_Tout_Start_L = -16;
      :Wt_Zc_Tout_Start_H = -1;
    endif
  else
    ->no -> If an odd number - branch;
    :A = Temp8;
    if (A.0 == 1) then
      ->yes ->
      (adjust_timing_two_steps)
      Commutation timing setting is 1 or 5
      Store 30deg in Temp1/2 (15deg + 15deg)
      Add 1 to final result (Temp1/2 * 2 + 1);
      :A = Temp1;
      :CARRY_BIT = 1;
      :A = A + (Temp1 + CARRY_BIT);
      :Temp1 = A;
      :A = Temp2;
      :A = A + (Temp2 + CARRY_BIT);
      :Temp2 = A;
      ->Store minimum time (0deg) in Temp3/4;
      :Temp3 = -1;
      :Temp4 = -1;
    else
      ->no -> Commutation timing setting is 2 or 4
      Store 22.5deg in Temp1/2 (15deg + 7.5deg);
      :A = Temp1;
      :A = A + Temp5;
      :Temp1 = A;
      :A = Temp2;
      :A = A + (Temp6 + CARRY_BIT);
      :Temp2 = A;
      :A = Temp5;
      :Temp3 = A;
      :A = Temp6;
      :Temp4 = A;
    endif
    
    ->(store_times_up_or_down)
    Is timing higher than normal?;
    :CARRY_BIT = 0;
    :A = Temp8;
    :A = A - (3 + CARRY_BIT);
    if (CARRY_BIT == 1) then
      ->yes ->
      (store_times_decrease)
      Now commutation time (~60deg)
      divided by 4 (~15deg nominal);
      :Wt_Comm_Start_L = Temp1;
      :Wt_Comm_Start_H = Temp2;
      ->New commutation advance
      time (~15deg nominal);
      :Wt_Adv_Start_L = Temp3;
      :Wt_Adv_Start_H = Temp4;
      ->Set very short delays for
      all but advance time during
      startup, in order to widen
      zero cross capture range;
      if (Flag_Startup_Phase == 1) then (yes)
        :Wt_Comm_Start_L = -16;
        :Wt_Comm_Start_H = -1;
        :Wt_Zc_Scan_Start_L = -16;
        :Wt_Zc_Scan_Start_H = -1;
        :Wt_Zc_Tout_Start_L = -16;
        :Wt_Zc_Tout_Start_H = -1;
      endif
    else
      ->no ->
      (store_times_increase)
      Now commutation time (~60deg)
      divided by 4 (~15deg nominal);
      :Wt_Comm_Start_L = Temp3;
      :Wt_Comm_Start_H = Temp4;
      ->New commutation advance time
      (~15deg nominal);
      :Wt_Adv_Start_L = Temp1;
      :Wt_Adv_Start_H = Temp2;
    endif
  endif
endif
->(wait_before_zc_scan)
Wait before zero cross scan
Waits for the zero cross scan wait time to elapse
If it has not already, we wait here for the Wt_Zc_Scan_Start_ delay to elapse.;
:Wait_For_Timer3;
->At this point Timer3 has (already) wrapped and been reloaded with the Wt_ZC_Tout_Start_ delay.
In case this delay has also elapsed, Timer3 has been reloaded with a short delay any number of times.
- The interrupt flag is set and the pending flag will clear immediately after enabling the interrupt.;
:Startup_Zc_Timeout_Cntd = 2;
:Flag_Timer3_Pending = 1;
->Enable Timer3 interrupts;
:EIE1 = EIE1 | 0x80;
if (Flag_Initial_Run_Phase == 1) then
  ->yes -> Set long timeout when starting;
  :Temp1 = Comm_Period4x_L;
  :Temp2 = Comm_Period4x_H;
  :CARRY_BIT = 0;
  :Temp2 = CARRY_BIT::Temp2 >> 1;
  :Temp1 = CARRY_BIT::Temp1 >> 1;
  if (MCU_48MHZ == 0) then
    :CARRY_BIT = 0;
    :Temp2 = CARRY_BIT::Temp2 >> 1;
    :Temp1 = CARRY_BIT::Temp1 >> 1;
  endif
  if (Flag_Startup_Phase == 1) then
    ->Increase timeout somewhat to avoid false wind up;
    :A = Temp2;
    :A = A + 40;
    :Temp2 = A;
  endif
  ->Disable Timer3 interrupts;
  :IE_EA = 0;
  :EIE1 = EIE1 & 0x7F;
  ->Timer3 disabled and interrupt flag cleared;
  :TMR3CN0 = 0;
  ->Set timeout;
  :CARRY_BIT = 0;
  :A = 0;
  :A = A - (Temp1 + CARRY_BIT);
  :TMR3L = A;
  :A = 0;
  :A = A - (Temp2 + CARRY_BIT);
  :TMR3H = A;
  ->Timer3 enabled and interrupt flag cleared;
  :TMR3CN0 = 0x04;
  :Flag_Timer3_Pending = 1;
  ->Enable Timer3 interrupts;
  :EIE1 = EIE1 | 0x80;
  :IE_EA = 1;
endif
:ret;
stop
@enduml
